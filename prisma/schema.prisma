generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  slug        String   @unique
  description String
  images      String[]
  details     String[]
  sizes       String[]
  colors      String[]
  inStock     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("user")
  accounts      Account[]
  addresses     Address[]
  orders        Order[]
  sessions      Session[]
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  name       String
  phone      String
  address    String
  city       String
  province   String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id            String    @id @default(cuid())
  userId        String
  addressId     String?
  items         Json
  status        String    @default("pending")
  paymentStatus String    @default("unpaid")
  total         Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  paymentId     String?
  paymentMethod String    @default("cod") // cod, midtrans, credit_card
  paymentToken  String?   // Store the Midtrans Snap token here
  metadata      Json?     // Store additional payment information and transaction details
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       Address?  @relation(fields: [addressId], references: [id])
  
  @@index([userId])
  @@index([addressId])
}

model Settings {
  id        String   @id @default(cuid())
  category  String   // 'general', 'shipping', 'payment'
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, key])
}
